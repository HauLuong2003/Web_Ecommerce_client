@page "/add-product"

<!-- Main content -->
<section class="content">
    <EditForm Model="product" Enhance OnValidSubmit="HandleSaveProduct">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="row">        
        <div class="col-md-6">
              
            <div class="card card-primary">
                <div class="card-header">
                    <h3 class="card-title">Add Product</h3>
                    <div class="card-tools">
                        <button type="button" class="btn btn-tool" data-card-widget="collapse" title="Collapse">
                            <i class="fas fa-minus"></i>
                        </button>
                    </div>
                </div>

                <div class="card-body">
                    
                    <div class="form-group">
                        <label for="inputName">Product Name</label>
                        <InputText @bind-Value="product.Name" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label for="inputDescription">Product Description</label>
                        <InputTextArea @bind-Value="product.Description" class="form-control" rows="4"></InputTextArea>
                    </div>
                    <div class="form-group">
                        <label for="inputStatus">Featured</label>
                            <InputSelect for="Featured" @bind-Value="product.Featured" class="form-control custom-select">                            
                                 <option value="true">True</option>
    <option value="false">False</option>
                        </InputSelect>
                    </div>
                    <div class="form-group">
                        <label for="Price">Price</label>
                            <InputNumber TValue="double" @bind-Value="price.Price1" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label for="Quantity">Quantity</label>
                        <InputNumber TValue="int" @bind-Value="product.Quantity" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label for="Brand">Brand</label>
                            <InputSelect for="brandName" @bind-Value="product.BrandId" class="form-control custom-select">
                                <option value="">Select Brand</option>
                                @foreach (Brand brands in brand)
                                    {
                                        <option value="@brands.BrandId">@brands.BrandName</option>
                                    }
                                
                        </InputSelect>
                    </div>
                    <div class="form-group">
                            <label class="form label @(ImageUploadMessage == ""?"":"Text-danger")">
                              @(ImageUploadMessage ==""? "Upload Image" :ImageUploadMessage)
                        </label>
                        <div class="input-group">
                            <div class="custom-file">
                                    <InputFile class="custom-file-input" OnChange="UploadImage1" />
                                <label class="custom-file-label" for="exampleInputFile">Choose file</label>
                            </div>
                            <div class="input-group-append">
                                <span class="input-group-text">Upload</span>
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="exampleInputFile">Image Product</label>
                        <div class="input-group">
                            <div class="custom-file">
                                    <InputFile type="file" class="custom-file-input" OnChange="UploadImage2" />
                                <label class="custom-file-label" for="exampleInputFile">Choose file</label>
                            </div>
                            <div class="input-group-append">
                                <span class="input-group-text">Upload</span>
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="exampleInputFile">Image Product</label>
                        <div class="input-group">
                            <div class="custom-file">
                                    <InputFile type="file" class="custom-file-input" OnChange="UploadImage3" id="image3" />
                                <label class="custom-file-label" for="exampleInputFile">Choose file</label>
                            </div>
                            <div class="input-group-append">
                                <span class="input-group-text">Upload</span>
                            </div>
                        </div>
                    </div>
              
                </div>
                <!-- /.card-body -->
            </div>
            <!-- /.card -->
        </div>
        <div class="col-md-6">
            <div class="card card-secondary">
                <div class="card-header">
                    <h3 class="card-title">Detail</h3>

                    <div class="card-tools">
                        <button type="button" class="btn btn-tool" data-card-widget="collapse" title="Collapse">
                            <i class="fas fa-minus"></i>
                        </button>
                    </div>
                </div>
                <div class="card-body">
                    <div class="form-group">
                        <label for="series">Series Laptop</label>
                            <InputText @bind-Value="detail.SeriesLaptop" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label for="PartNumber">Part Number</label>
                        <InputText @bind-Value="detail.PartNumber" class="form-control"/>
                    </div>
                    <div class="form-group">
                        <label for="Color">Color</label>
                        <InputText @bind-Value="detail.Color" class="form-control"/>
                    </div>
                    <div class="form-group">
                        <label for="CPU">CPU</label>
                      <InputText @bind-Value="detail.CpuGeneration" class="form-control"/>
                    </div>
                    <div class="form-group">
                        <label for="Screen">Screen</label>
                       <InputText @bind-Value="detail.Screen" class="form-control"/>
                    </div>
                    <div class="form-group">
                        <label for="Storage">Storage</label>
                        <InputText @bind-Value="detail.Storage" class="form-control"/>
                    </div>
                    <div class="form-group">
                        <label for="ConnetorPort">Connetor Port</label>
                       <InputText @bind-Value="detail.ConnectorPort" class="form-control"/>
                    </div>
                    <div class="form-group">
                        <label for="Wireless">Wireless Connection</label>
                            <InputText @bind-Value="detail.WirelessConnection" class="form-control" />
                        </div>
                    <div class="form-group">
                        <label for="KeyBoard">Key board</label>
                            <InputText @bind-Value="detail.Keyboard" class="form-control" />
                        </div>
                     <div class="form-group">
                        <label for="OS">OS</label>
                            <InputText @bind-Value="detail.Os" class="form-control" />
                        </div>
                    <div class="form-group">
                        <label for="Size">Size</label>
                            <InputText @bind-Value="detail.Size" class="form-control" />
                        </div>
                     <div class="form-group">
                            <label for="Pin">Pin</label>
                            <InputText @bind-Value="detail.Pin" class="form-control" />
                          
                    </div>
                    <div class="form-group">
                            <label for="Weight">Weight</label>
                            <InputText @bind-Value="detail.Weight" class="form-control" />
                            
                    </div>                      
                </div>
                <!-- /.card-body -->
            </div>
            <!-- /.card -->
         </div>
   
    </div>
        <div class="row">
            <div class="col-12">

                <input type="submit" value="Create new Product" class="btn btn-success float-right">
                
                <a href="/product-list" class="btn btn-secondary">Cancel</a>

            </div>
        </div>
    </EditForm>

 </section>

@code {
    public Product product { get; set; } = new();
    public Price price { get; set; } = new();
    public List<Brand> brand { get; set; } = new List<Brand> ();
    public Detail detail { get; set; } = new();
    string ImageUploadMessage = "";

    protected override async Task OnInitializedAsync()
    {
        brand = await brandService.GetAllBrands();
    }

    public async Task UploadImage1(InputFileChangeEventArgs e)
    {
        try
        {
            var file = e.File;
            if (file != null)
            {
                var uploadsFolder = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "images");
                if (!Directory.Exists(uploadsFolder))
                {
                    Directory.CreateDirectory(uploadsFolder);
                }

                var fileName = Path.GetFileName(file.Name);
                var filePath = Path.Combine(uploadsFolder, fileName);
                    
                // Create the directory if it doesn't exist
                if (!Directory.Exists(uploadsFolder))
                {
                    Directory.CreateDirectory(uploadsFolder);
                }

                using (var stream = new FileStream(filePath, FileMode.Create))
                {
                    await file.OpenReadStream().CopyToAsync(stream);
                }

                // Save the image path to the product
                var imagePath = "images/" + fileName;
                product.Image1 = imagePath;
                ImageUploadMessage = "Image uploaded successfully";
            }
            else
            {
                ImageUploadMessage = "No file selected";
            }
        }
        catch (Exception ex)
        {
            // Handle exception and log error
            ImageUploadMessage = "Image upload failed: " + ex.Message;
        }

    }
    public async Task UploadImage2(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            var uploadsFolder = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "images");
            var fileName = Path.GetFileName(file.Name);
            var filePath = Path.Combine(uploadsFolder, fileName);
            using var stream = new FileStream(filePath, FileMode.Create);
            await file.OpenReadStream().CopyToAsync(stream);

            // Save the image path to the product
            var imagePath = "images/" + fileName;
            product.Image2 = imagePath;
            ImageUploadMessage = "Image uploaded successfully";
            return;
        }
        ImageUploadMessage = "Image upload failed";

    }
    public async Task UploadImage3(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            var uploadsFolder = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "images");
            var fileName = Path.GetFileName(file.Name);
            var filePath = Path.Combine(uploadsFolder, fileName);
            using var stream = new FileStream(filePath, FileMode.Create);
            await file.OpenReadStream().CopyToAsync(stream);

            // Save the image path to the product
            var imagePath = "images/" + fileName;
            product.Image3 = imagePath;
            ImageUploadMessage = "Image uploaded successfully";
            return;
        }
        ImageUploadMessage = "Image upload failed";

    }
    public async Task HandleSaveProduct()
    {
        if (string.IsNullOrEmpty(product.Image1))
        {
            ImageUploadMessage = "Please upload at least one image";
            return;
        }
        var addProductDto = new AddProductDTO
            {
                Product = product,
                Detail = detail,
                Price = price
            };
        var (flag, message) = await ClientService.AddProduct(addProductDto);
        if (flag)
        {
            Navigation.NavigateTo("/product-list");
        }
        else
        {
            return;
        }
        return;
    }

}